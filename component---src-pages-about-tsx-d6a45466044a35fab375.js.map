{"version":3,"sources":["webpack:///./src/pages/about.tsx"],"names":["AttributionItem","props","item","key","license","name","attr_text","url","Item","href","AboutPage","state","attributionData","componentDidMount","fetch","then","response","status","json","data","console","log","setState","render","this","vertical","as","Content","target","map","attr","React","withLayout"],"mappings":"4LAIA,IAAMA,EAAkB,SAAAC,GAAS,MACYA,EAAMC,KAAzCC,EADuB,EACvBA,IADuB,IAClBC,eADkB,MACR,GADQ,OACJC,KACcD,EAAjCE,kBAFuB,MAEX,KAFW,IAEUF,EAAfG,WAFK,MAEC,KAFD,EAI/B,OACE,gBAAC,IAAKC,KAAN,CAAWL,IAAKA,GACbI,EACC,qBAAGE,KAAMF,GAAMD,GAAa,yBAAIA,IAEhC,2BAAMA,GAAa,yBAAIA,MAMzBI,E,4JACJC,MAAQ,CACNC,gBAAiB,M,EAGnBC,kBAAoB,WAClBC,MAAM,4DACHC,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAASE,OAEX,QAERH,MAAK,SAAAI,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEV,gBAAiBO,Q,4GAIvCI,OAAA,WAAS,IACCX,EAAoBY,KAAKb,MAAzBC,gBACR,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAASa,UAAQ,GACf,gBAAC,IAAD,CAAQC,GAAG,MACT,gBAAC,IAAD,CAAMrB,KAAK,gBACX,gBAAC,IAAOsB,QAAR,gBAGJ,gBAAC,IAAD,CAASF,UAAQ,GACf,qEACA,oDAC2B,IACzB,qBAAGhB,KAAK,6BAA6BmB,OAAO,SAA5C,+BAIF,gEAEE,qBACEnB,KAAK,sDACLmB,OAAO,SAEN,IAJH,wBASJ,gBAAC,IAAD,CAAQF,GAAG,MACT,gBAAC,IAAOC,QAAR,qBAEF,gBAAC,IAAD,CAASF,UAAQ,GACf,gMAKA,gQAMA,gBAAC,IAAD,CAASA,UAAQ,IAChBb,EACC,2BACE,gBAAC,IAAD,KACGA,EAAgBiB,KAAI,SAAAC,GAAI,OACvB,gBAAC9B,EAAD,CAAiBE,KAAM4B,SAK7B,wD,GAzEYC,aAiFTC,sBAAWtB","file":"component---src-pages-about-tsx-d6a45466044a35fab375.js","sourcesContent":["import * as React from \"react\";\nimport { Header, Container, Segment, Icon, List } from \"semantic-ui-react\";\nimport { withLayout } from \"../components/Layout\";\n\nconst AttributionItem = props => {\n  const { key, license = {}, name = null } = props.item;\n  const { attr_text = null, url = null } = license;\n\n  return (\n    <List.Item key={key}>\n      {url ? (\n        <a href={url}>{attr_text && <p>{attr_text}</p>}</a>\n      ) : (\n        <div>{attr_text && <p>{attr_text}</p>}</div>\n      )}\n    </List.Item>\n  );\n};\n\nclass AboutPage extends React.Component {\n  state = {\n    attributionData: null\n  };\n\n  componentDidMount = () => {\n    fetch(\"https://data.kylebarron.dev/all-transit/attribution.json\")\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        }\n        return null;\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ attributionData: data });\n      });\n  };\n\n  render() {\n    const { attributionData } = this.state;\n    return (\n      <Container>\n        <Segment vertical>\n          <Header as=\"h2\">\n            <Icon name=\"info circle\" />\n            <Header.Content>About</Header.Content>\n          </Header>\n        </Segment>\n        <Segment vertical>\n          <p>This starter was created by @fabien0102.</p>\n          <p>\n            For any question, I'm on{\" \"}\n            <a href=\"https://discord.gg/2bz8EzW\" target=\"blank\">\n              discord #reactiflux/gatsby\n            </a>\n          </p>\n          <p>\n            For any issues, any PR are welcoming\n            <a\n              href=\"https://github.com/fabien0102/gatsby-starter/issues\"\n              target=\"blank\"\n            >\n              {\" \"}\n              on this repository\n            </a>\n          </p>\n        </Segment>\n        <Header as=\"h2\">\n          <Header.Content>Attribution</Header.Content>\n        </Header>\n        <Segment vertical>\n          <p>\n            This project wouldn't be possible without the hard work of those\n            working on the Transitland database and the transit agencies who\n            release their data to the public.\n          </p>\n          <p>\n            Attribution statements are auto-generated from the license\n            information in the Transitland database. As such, the following is\n            very messy, but is an attempt at displaying attribution statements\n            for all providers who require one.\n          </p>\n          <Segment vertical/>\n          {attributionData ? (\n            <div>\n              <List>\n                {attributionData.map(attr => (\n                  <AttributionItem item={attr} />\n                ))}\n              </List>\n            </div>\n          ) : (\n            <p>Loading attribution data</p>\n          )}\n        </Segment>\n      </Container>\n    );\n  }\n}\n\nexport default withLayout(AboutPage);\n"],"sourceRoot":""}