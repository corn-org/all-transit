{"version":3,"sources":["webpack:///./src/pages/about.tsx"],"names":["AttributionItem","props","item","key","license","name","attr_text","url","Item","href","dataFiles","desc","size","DataDownloadsList","divided","relaxed","map","Icon","verticalAlign","Content","Header","as","target","Description","AboutPage","state","attributionData","componentDidMount","fetch","then","response","status","json","data","console","log","setState","render","this","vertical","attr","React","withLayout"],"mappings":"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","file":"component---src-pages-about-tsx-b26eda33c19def1bdb61.js","sourcesContent":["import * as React from \"react\";\nimport { Header, Container, Segment, Icon, List } from \"semantic-ui-react\";\nimport { withLayout } from \"../components/Layout\";\n\nconst AttributionItem = props => {\n  const { key, license = {}, name = null } = props.item;\n  const { attr_text = null, url = null } = license;\n\n  return (\n    <List.Item key={key}>\n      {url ? (\n        <a href={url}>{attr_text && <p>{attr_text}</p>}</a>\n      ) : (\n        <div>{attr_text && <p>{attr_text}</p>}</div>\n      )}\n    </List.Item>\n  );\n};\n\nconst dataFiles = [\n  {\n    key: \"Operators\",\n    href:\n      \"https://data.kylebarron.dev/all-transit/archive/2020_02/operators.geojson.gz\",\n    desc:\n      \"A transit agency that offers services to the general public along fixed routes.\",\n    size: \"4 MB\"\n  },\n  {\n    key: \"Routes\",\n    href:\n      \"https://data.kylebarron.dev/all-transit/archive/2020_02/routes.tar.gz\",\n    desc:\n      \"All information about a single transit service as defined by the transit agency. A route may have forks and thus may not be a single continuous line.\",\n    size: \"200 MB\"\n  },\n  {\n    key: \"Route Stop Patterns\",\n    href:\n      \"https://data.kylebarron.dev/all-transit/archive/2020_02/route_stop_patterns.tar.gz\",\n    desc: \"Routes split into individual linear geometries.\",\n    size: \"450 MB\"\n  },\n  {\n    key: \"Stops\",\n    href:\n      \"https://data.kylebarron.dev/all-transit/archive/2020_02/stops.tar.gz\",\n    desc:\n      \"Each point along a Route or Route Stop Pattern where passengers may get on or off.\",\n    size: \"100 MB\"\n  }\n];\n\nconst DataDownloadsList = () => {\n  return (\n    <List divided relaxed>\n      {dataFiles.map(item => (\n        <List.Item key={item.key}>\n          <List.Icon name=\"download\" size=\"large\" verticalAlign=\"middle\" />\n          <List.Content>\n            <List.Header as=\"a\" href={item.href} target=\"blank\">\n              {item.key} ({item.size})\n            </List.Header>\n            <List.Description>{item.desc}</List.Description>\n          </List.Content>\n        </List.Item>\n      ))}\n    </List>\n  );\n};\n\nclass AboutPage extends React.Component {\n  state = {\n    attributionData: null\n  };\n\n  componentDidMount = () => {\n    fetch(\"https://data.kylebarron.dev/all-transit/attribution.json\")\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        }\n        return null;\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ attributionData: data });\n      });\n  };\n\n  render() {\n    const { attributionData } = this.state;\n    return (\n      <Container>\n        <Segment vertical>\n          <Header as=\"h2\">\n            <Icon name=\"info circle\" />\n            <Header.Content>About</Header.Content>\n          </Header>\n        </Segment>\n        <Segment vertical>\n          <p>\n            This website was created by{\" \"}\n            <a href=\"https://kylebarron.dev\" target=\"blank\">\n              Kyle Barron\n            </a>\n            . The code to generate this website is{\" \"}\n            <a href=\"https://github.com/kylebarron/all-transit\" target=\"blank\">\n              on Github\n            </a>\n          </p>\n        </Segment>\n        <Header as=\"h3\">\n          <Header.Content>Frequently Asked Questions</Header.Content>\n        </Header>\n        <Header as=\"h4\">\n          <Header.Content>\n            Why are some routes long straight lines?\n          </Header.Content>\n        </Header>\n        Some transit data providers don't include the actual geometries that a\n        route travels, and only give the points where a stop occurs. This means\n        that there's no way to reliably guess how the transit vehicle travels\n        between the two points, and so it shows up in the data as a straight\n        line.\n        <Header as=\"h4\">\n          <Header.Content>How does it work?</Header.Content>\n        </Header>\n        <p>\n          I have a blog post{\" \"}\n          <a href=\"https://kylebarron.dev/blog/all-transit\">here</a> that goes\n          into more detail about the behind-the-scenes work that makes\n          everything work.\n        </p>\n        <Header as=\"h3\">\n          <Header.Content>Download the data</Header.Content>\n        </Header>\n        <p>\n          The Transitland database currently doesn't offer bulk downloads, so it\n          takes a while to download data for the entire planet at 60 requests\n          per minute. Below are download links for the data I use in this\n          website. All data files were collected in February 2020. For more\n          information about how to use the data files, consult the{\" \"}\n          <a href=\"https://transit.land/documentation/\" target=\"blank\">\n            Transitland documentation\n          </a>\n          .\n        </p>\n        <DataDownloadsList />\n        <Header as=\"h3\">\n          <Header.Content>Notice a missing transit feed?</Header.Content>\n        </Header>\n        <p>\n          This website uses data from the{\" \"}\n          <a href=\"https://transit.land\" target=\"blank\">\n            Transitland database\n          </a>\n          , which combines{\" \"}\n          <a\n            href=\"https://en.wikipedia.org/wiki/General_Transit_Feed_Specification\"\n            target=\"blank\"\n          >\n            General Transit Feed Specification\n          </a>{\" \"}\n          (GTFS) feeds into a single database. They have a process for adding a\n          new GTFS feed to their database. Read their documentation{\" \"}\n          <a\n            href=\"https://transit.land/documentation/feed-registry/add-a-feed.html\"\n            target=\"blank\"\n          >\n            here\n          </a>{\" \"}\n          for more information.\n        </p>\n        <Header as=\"h2\">\n          <Header.Content>Attribution</Header.Content>\n        </Header>\n        <Segment vertical>\n          <p>\n            This project wouldn't be possible without the hard work of those\n            working on the Transitland database and the transit agencies who\n            release their data to the public.\n          </p>\n          <p>\n            Attribution statements are auto-generated from the license\n            information in the Transitland database. As such, the following is\n            very messy, but is an attempt at displaying attribution statements\n            for all providers who require one.\n          </p>\n          <Segment vertical />\n          {attributionData ? (\n            <div>\n              <List>\n                {attributionData.map(attr => (\n                  <AttributionItem item={attr} />\n                ))}\n              </List>\n            </div>\n          ) : (\n            <p>Loading attribution data</p>\n          )}\n        </Segment>\n      </Container>\n    );\n  }\n}\n\nexport default withLayout(AboutPage);\n"],"sourceRoot":""}